# 웹소켓통신을 통한 실시간 채팅
1. 웹프로그램에서 채팅을 중요한 기술 중에 하나이다.
2. 특정 사이트에서 실시간으로 채팅을 관리자나 상담자등으로 할 수 있는 것을
	보았을 것이다.
3. 이와같이 실시간으로 사이트를 사용하는 관리자나 사용자와 채팅을 할 수 있다면
	효율적인 웹 서비스를 제공할 수 있다.
4. 핵심 기술 내용
	1) 웹 소켙 통신
		- 소켙 통신이란 네트워크 상에서 데이터를 전송할 수 있는 기술을 말한다.
		- 보통 소켙 통신은 클라이언트 프로그램과 서버프로그램으로 나누어서 처리한다.
			클라이언트 프로그램은 서버에 접속해서 데이터를 전달하고, 
			전달 받은 프로그램이고,
			서버 프로그램을 이러한 클라이언트의 요청에 따라 데이터를 전송
			해주는 프로그램이다.
		- 웹 소켙 통신이란 웹 서버 기반으로 웹 프로그램에서 소켙으로 통신을
			할 수 있는 것을 말한다.
			서버 프로그램
				웹서버안에 특정한 컨테이너 핸들러 설정(자바) : 클라이언트 요청을 
				받아서 푸시방식으로 다른 클라이언트에 요청을 전달
			클라이언트 프로그램
				js에서 이벤트에 의해 메시지를 서버에 전달하거나,
				실시간으로 전달해 오는 데이터를 화면에 출력 처리되게 한다.		
			
			
	2) 실시간 처리
		- 웹 서버기반 프로그램에서 실시간으로 처리할려면,
		- 클라이언트가 요청했을 때, 서버에서는 접속한 다른 클라이언트에게
			push방식으로 데이터를 처리해주어야 실시간 처리가 된다.
					     서버
				
			클라이언트1  클라이언트2   클라이언트3	
		- 위와 같이 클라이언트1이 이벤트에 의해 서버에 데이터를 전송하면
			클라이언트2와 클라이언트3은 서버에서 데이터를 push방식으로
			밀어서 데이터가 처리되는 것을 할 수 있다.
5. 채팅 처리 프로세스
	0) back단 : 서버안에 was가 로딩됨과 동시에 컨테이너에 소켙통신을 위한
		모듈과 클라이언트로 부터 데이터가 왔을 때, 처리되는 모듈을 메모리로
		로딩되어 웹 소켙을 위한 백앤드 처리를 위한 준비를 끝낸다.
		초기 채팅하는 화면을 호출한 컨트롤러를 url에 의해서 처리된다.
	1) front단 : url에 연동되어 있는 채팅하는 화면을 로딩한다.
	2) front단 : 채팅하는 사용자 UI에 사용자 명을 입력하고 접속버튼을
		클릭하면, 이와 연결되어 있는 이벤트 핸들러 js함수에 의해 웹소켙으로
		서버에 접속하게 한다.
	3) back단 : 클라이언트에 의해 소켙 접속 session이 들어 오면,
		서버단에 있는 핸들러 객체를 이 소켙 접속 session을 하나씩 누적
		하여 저장한다.
	4) front단 : 일단 클라이언트들이 서버에 소켙에 접속하면 메시지를 보낸다.
	5) back단 : 특정 클라이언트에 의해 요청받은 메시지는 비지니스로직에
		의해 등록된 다른 대상 클라이언트에서 해당 메시지를 보낸다.
	6) front단 : 서버에서 push방식으로 오는 메시지를 접속한 소켙
		객체(js)를 통해 받아서 화면 ui로 메시지를 로딩되어 출력된다.
		이러한 내용은 계속 클라이언트들 간에 주고 받으면서 채팅을 한다.
	7) front단 : 대화가 끝나면 접속 종료 버튼을 클릭하여 서버에 요청한다.
	8) back단 : 클라이언트에 의해 접속 종료 이벤트가 오면 해당 핸들러
		기능 메서드를 통해서 누적되어 있는 접속 session가운데 해당 클라
		이언트를 삭제 처리한다.
	 			
6. 개발 순서
	1) 자바로 서버단에서 처리하는 핸들러 클래스를 선언
		- 필드로 접속자 세션 선언
	
		- 클라이언트 세션의 접속과 등록[1번서버메서드]
			- 접속과 함께 전역변수에 접속한 소켙세션 누적
		- 메시지 처리[2번서버메서드]
			- 받은 메시지를 등록되어 있는 누적된 소켙세션에게 전달
		- 클라이언트 세션 접속 종료[3번서버메서드]
			- 전역변수에 등록되어 있는 소켙세션중에 하나를 제외시킨다.
		- 예외 처리
	2) 웹 소켙 통신 기본 모듈 컨테이너에 등록, 설정 값 컨테이너에 설정
		- 선언한 핸들러 클래스를 객체로 등록 처리
			통신 서버 url
	3) 웹 채팅 화면 로딩
		- controller/url설정
		- 화면단 호출(채팅하는 화면 구현)
	4) 웹 채팅 클라이언 화면(jsp)
		- 채팅하는 화면 ui구현
			- 접속자 입력
			- 메시지 처리 
			- 접속시작/접속종료/메시지 버튼과 이벤트 핸들러 처리
			- 채팅자명(입력), 전송할 메시지(입력), 
				채팅 내용(출력) 기타:채팅할 사람-1:1, 그룹채팅)
		- 이벤트 핸들러에 의해 기능 처리
			- 접속시작 :
				접속자 아이디를 입력해서 접속 버튼을 클릭시
				js로 서버와 접속하는 웹 소켙 클라이언트 객체 생성
				컨테이너에 선언하는 통신 서버 url
				위에 선언한 [1번서버메서드]호출
			- 메시지 전송
				접속자를 메시지를 입력하고 전송버튼을 클릭시, 
				웹 소켄 클라이언트 객체 기능메서드에 의해서 서버의
				기능 메시지 전송 메서드를 호출한다.[2번서버메서드] 	
			- 메시지를 받은 핸들러 메서드
				서버에서 온 메시지를 클라이언트 화면에 로딩된다.
				ex) @@@님  안녕하세요
			- 종료 처리
				접속자를 접속종료 버튼을 통해서, 서버의 접속 종료
				메서드를 호출한다.[3번서버메서드]
# 채팅화면 이벤트 핸들러 주요 기능
1. 아이디 입력 후, 접속버튼 클릭/enter
	아이디 입력 유효성 check
	웹 소켙 서버와 연동하여 접속하게 한다
2. 메시지입력 후, 메시지 전송 버튼 클릭/enter
	서버에 메시지 전송 처리
3. 서버에서 오는 메시지 받기(서버에 오는 push데이터 처리)
	메시지에서 서버에 오는 메시지를 받아서 출력되게 처리
4. 접속종료
	서버에 접속 종료 처리 메서드 호출.

# 기타 채팅시 필요한 화면 UI 처리
1. 상대방과 메시지 보내는 사람의 메시지 정렬 위치 변경
	1) 상대방 : 왼쪽
	2) 메시지 보내는 사람 : 오른쪽 정렬 처리
	==>
	서버에서 오는 메시지에 이름과 현재 id값과 동일하면 오른쪽 정렬
	다르면 왼쪽 정렬..
	
2. 메시지가 입력할 때, 화면에 메시지 내용을 메시지 상하범위가
	넘더라도 하단에 표시 처리
							
# 채팅 처리 프로세스(파일별)
1. 컨테이너(dispatcher-servlet.xml)
	1) 채팅 서버단 소켙통신 객체 및 핸들러 호출 url 설정
	
		<websocket:mapping handler="chatHandler" 
			path="/chat-ws.do"/>
2. 서버단(핸들러/controller)
	1) 채팅핸들러 A02_ChatHandler.java @Component("chatHandler")
		- 필드 - 접속자 세션(소켙세션, 접속자 아이디)		
		- 기능메서드
			처음 접속시 afterConnectionEstablished
					users.put(session.getId(),session); 
					소켙 세션을 추가(서버내 처리)
			메시지 전달 handleMessage
				클라이언트에서 온 메시지 받기 - 접속자아이디:메시지내용
				접속자 아이디를 추출해서 중복되지 않게 등록
				접속한 클라이언트에게 메시지 전달하기				
			접속종료 afterConnectionClosed
				서버단 단위로 접속을 종료 처리한다.
			에러처리 handleTransportError
			-------
			접속자할 때, 중복 없이 접속자 등록
				conList(String[] msgArr) : 등록/리스트를 가져오는 메서드
			
	2) 초기호출 및 접속자확인(ajax)
	   /chatting.do : 초기화면 호출
	   /chGroup.do : 현재 접속한 사용자 중복제거한 아이디 ajax로 가져오기
	   	    @Autowired private A02_ChatHandler chHandl;
			d.addAttribute("group", 
				chHandl.conList(new String[]{""}));
	
	
3. 클라이언트(jsp)	
	1) 화면 UI
		접속자 채팅입장/나가기 활성/비활성
		접속자처리
		내용에 메시지 입력시 스크롤처리
		메시지 입력 후, 초기화
		접속자리스트(ajax)
	2) 기능메서드(소켙 클라이언트 객체)
		접속시
		메시지 전송
		메시지 받기(서버에서 전달)
		종료시
	
# 클라이언트 접속객체와 메서드
1. 소켓클라이언트 생성
var wsocket = new WebSocket("ws:localhost:7080/
	${path}/chat-ws.do")
2. 접속 : wsocket.onopen()=함수  ==> 서버단의 접속메서드	
	서버단 연결 메서드와 서버단의 메시지 전송도 함께 처리.
3. 메시지전송: 
	wsocket.send(전송할메시지)	 ==> 서버단의 접속메서드에 연결
	    					handleMessage()
4. 메시지전달받기:
	wsocket.onmessage=함수 ==> 
		handleMessage() 안에.. ws.sendMessage(message);
		와 연결되어 서버에 전달되는 메시지를 각 클라이언트에서는
		push방식으로 받는다..
	revMsgFun() : 전달받은 메시지를 전송자인지 받는 사람인지 구분하여
		정렬처리, 자동 스크롤 처리까지 하여 화면에 출력..
5. 접속종료시 
	wsocket.close()							

# 접속자를 확인하여 1:1 또는 그룹 채팅하기
1. 접속자 확인하기
	1) 핸들러 부분에 접속자 아이디를 저장하는 전역변수 선언
		- 서버단 소켙 id, 클라이언트단 접속자 아이디 둘다 저장하는 변수
		Map<String, WebSocketSession> users  : 서버단에 자동생성되는 소켙 id와 메시지를 저장한 소켓세션
		
		Map<String, String> ids : 서반단 자동생성되는 id와 클라이언트에 입력한 접속자명을 저장.
		
	2) 핸들러 부분에 현재 접속한 아이디(클라이언트단 입력한 아이디 저장된 데이터 호출) 리턴하는 메서드
	3) ajax로 controller단에서 접속한 아이디 리스트 시작시점 또는 접속시 호출

	

2. 1:1 채팅 처리
	0) 메시지 전송 패턴 
		현재 패턴  ==> 전송자:메시지
	1) 화면에서 채팅하고자 하는 당사자 id 클릭
	2) 해당 id 구분자로 전달
		 보내는사람:전송메시지:받는사람
	3) 받는 메시지에서 받는 사람에 해당할 때만 메시지 전송되게 처리
		function revMsgFun(msg){
			var msgArr= msg.split(":");
			// 메시지를 전달할 사람과 현재 아이디와 같을 때만 메시지가
			// 추가해서 보낼 수 있게 처리..
			if(msgArr[2] == $("#id").val())
3. 그룹 채팅
	1) 화면에서 UI를 그룹을 입력하게 옵션으로 처리한다.
	2) 해당 그룹를 마지막 구분자로 보낸다.
		보내는사람:전송메시지:받는그룹
	3) 받는 메시지에서 받는 그룹일 때만 전송되게 처리한다.
		채팅 그룹 : <input id="chGroup"
		function revMsgFun(msg){
			if(msgArr[2] == $("#chGroup").val())
	
2. 	 	
	  
									
		
		
	 			
			
			
			
					 	